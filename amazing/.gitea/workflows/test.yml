name: Gitea Actions Demo
run-name: ${{ gitea.actor }} is testing out Gitea Actions 🚀
on: [push]

jobs:
  Explore-Gitea-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ gitea.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by Gitea!"
      - run: echo "🔎 The name of your branch is ${{ gitea.ref }} and your repository is ${{ gitea.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "💡 The ${{ gitea.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ gitea.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."
      - run: echo "${{github.sha}}"
      - run: echo "${{github.event.head_commit.message }}"
      - run: echo "${{ gitea.ref }}"
      - run: echo "${{github.run_id}}"
  Build-and-Push:
    runs-on: ubuntu-latest
    steps:
      - name: Calculate Build Start Time
        run: |
          echo "BUILD_START_TIME=$(date +%s)" >> $GITHUB_ENV
          echo "BUILD_START=$(date)" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Check out repository code
        uses: actions/checkout@v4
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          # target: basic
          platforms: |
            linux/amd64
            linux/arm64
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.run_number }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
      - name: Remove Docker Image
        run: |
          docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.run_number }}
      - name: Calculate build duration
        if: always()
        run: |
          end_time=$(date +%s)
          duration=$((end_time - $BUILD_START_TIME))
          echo "duration=$duration" >> $GITHUB_ENV
      - name: Get short commit hash
        if: always()
        id: short_commit
        run: echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
     
      # - name: Failure Notification
      #   # uses: slackapi/slack-github-action@v1.26.0
      #   uses: skitionek/notify-microsoft-teams@master
      #   if: failure()
      #   with:
      #     # payload: |
      #     #   {
      #     #     "blocks": [
      #     #       {
      #     #         "type": "section",
      #     #         "text": {
      #     #         "type": "mrkdwn",
      #     #         "text": "*:x: Failed GitHub Actions*"
      #     #         }
      #     #       }
      #     #     ]
      #     #   }

      #     webhook_url: ${{ secrets.WEBHOOK_URL }}
      #     needs: ${{ toJson(needs) }}
      #     job: ${{ toJson(job) }}
      #     steps: ${{ toJson(steps) }}
          
        # env:
        #   SLACK_WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        #   SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      - name: Success Notification
        # uses: slackapi/slack-github-action@v1.26.0
        # uses: skitionek/notify-microsoft-teams@master
        uses: docker://waglay14/teams-notification
        if: always()
        # with:
          # payload: |
          #   {
          #     "blocks": [
          #       {
          #         "type": "section",
          #         "text": {
          #         "type": "mrkdwn",
          #         "text": "*:white_check_mark: Success GitHub Actions*"
          #         }
          #       },
          #       {
          #        "type":"section",
          #        "fields":[ 
          #             {   
          #             "type":"mrkdwn",
          #             "text": "Build time Taken is: ${{env.duration}}"
          #             },
          #             {
          #             "type":"mrkdwn",
          #             "text": "This is a test message"
          #             }                 
          #         ]
          #       }
          #     ]
          #   }
          # webhook_url: ${{ secrets.WEBHOOK_URL }}
          # raw: >-
          #   {
          #       "type": "message",
          #       "attachments":
          #       [
          #           {
          #               "contentType": "application/vnd.microsoft.card.adaptive",
          #               "content":
          #               {
          #                   "type": "AdaptiveCard",
          #                   "body":
          #                   [
          #                       {
          #                           "type": "TextBlock",
          #                           "text": "Test title text"
          #                       }
          #                   ]
          #               }
          #           }
          #       ]
          #   }
          # needs: ${{ toJson(needs) }}
          # job: ${{ toJson(job) }}
          # steps: ${{ toJson(steps) }}
          
        env:
          WEBHOOK_URL: ${{secrets.WEBHOOK_URL}}
          gitea_status: ${{job.status}}
          Time_Taken: ${{env.duration}}
          Commit: ${{github.sha}}
          COMMIT_MESSAGE: ${{github.event.head_commit.message}}
          Repo: ${{gitea.repository}}
          EVENT_NAME: ${{gitea.event_name}}
          ACTOR: ${{gitea.actor}}
          BRANCH: ${{ gitea.ref }}
          BUILD_NO: ${{github.run_id}}
          BUILD_START: ${{env.BUILD_START}}
        #   SLACK_WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        #   SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      # - name: Cache Build  
      #   uses: actions/cache@v3
      #   with: # Specify with your cache path
      #     path: |
      #         /root/.cache
      #     key: ${{ runner.os }}-buildx-${{ gitea.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-${{ gitea.sha }}  
      
      # - run: echo "this is the pusher email ${{gitea.event.pusher.email}}"
      # - run: echo "${{gitea@hostname}}"
  # Cache-Go:
  #   name: Cache Go
  #   runs-on: node
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-go@v3
  #       with:
  #         go-version: '>=1.20.1'
  #     # - run: |
  #     #     apt update && apt install nodejs npm -y
  #     - uses: https://gitea.com/actions/go-hashfiles@v0.0.1
  #       id: hash-go
  #       with:
  #         patterns: |
  #           go.mod
  #           go.sum 
  #           **/package.*json                                   
  #     - name: cache go
  #       id: cache-go
  #       uses: actions/cache@v3
  #       with: # Specify with your cache path
  #         path: |
  #           /root/go/pkg/mod
  #           /root/.cache/go-build
  #         key: go_path-${{ steps.hash-go.outputs.hash }}
  #         restore-keys: |-
  #           go_cache-${{ steps.hash-go.outputs.hash }}